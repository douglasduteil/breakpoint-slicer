//
// IMPORT
//

@import
  "../../bower_components/breakpoint-sass/stylesheets/_breakpoint.scss",
  "../../stylesheets/_breakpoint-slicer.scss";

@import
  "../../bower_components/jeet.gs/scss/jeet/index.scss";

//
// VARIABLES
//

$slicer-breakpoints: (
  s  : 768px,  // Small
  m  : 992px, // Medium
  l  : 1200px,  // Large
);

$green: #48cfad;
$black : #444;

$primary-color: #48cfad;
$secondary-color: #fc6e51;
$thirdary-color: #db5138;

$helvetica : "Helvetica W01 Bold", helvetica bold, helvetica, arial, sans-serif;

//
// GLOBAL
//

html {
  font-size: 16px;
  overflow-x: hidden;

  @include below(m){
    font-size: 14px;
  }
}

body, div, header, footer, h1, h2, h3, p, ul, ol, li, code, a, span{
  margin: 0;
  padding: 0;
  font-family: "Ubuntu";
  color: $black;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-tap-highlight-color: rgba(0,0,0,0);
}
// BASE

.cl{
  @extend %cf;
  clear: both;
}

.container {
  @include below(s){
    @include column(11/12, $offset: 1/24);
  }
  @include from(s){
    @include column(4/6, $offset: 1/6);
    max-width: 1200px;
  }
  @include from(l){
    display: table;
    margin: auto;
    float: none;
    &:last-child{
      margin-right: auto;
    }
  }
}

.jumbotron {
  padding: 90px 0;
  background: $green;
  color: white;
  z-index: 10;

  // jumbotron__h1
  &__h1 {
    color: white;
    font-size: 3.25rem;
    font-family: $helvetica;
    font-weight: bold;
    text-align: center;
  }
}

//
// DEMO
//

.square {
  @include span(1/4);
  border: 1px solid #5e5e5e;
  box-sizing: border-box;

  height: 50px;

  // Hidden
  &:after {
    display: block;

    text-align: center;
    height: 100%;

    line-height: 3rem;
    content: 'Hidden';
    color: #ccc;
    background-color: #f9f9f9;
  }
}

@mixin active-square(){
  // Visible
  &:after {
    content: 'Visible';
    color: #468847;
    background-color: #dff0d8!important;
  }
}

.at-row {
  $keys: map-keys($slicer-breakpoints);
  @each $k, $v in $slicer-breakpoints {
    $i: index($keys, $k) + 1;
    @include at($k){
      > .square:nth-child(#{$i}){
        @include active-square();
      }
    }
  }
}

.from-row {
  $keys: map-keys($slicer-breakpoints);
  @each $k, $v in $slicer-breakpoints {
    $i: index($keys, $k) + 1;
    @include from($k){
      > .square:nth-child(#{$i}){
        @include active-square();
      }
    }
  }
}

.below-row {
  $keys: map-keys($slicer-breakpoints);
  @each $k, $v in $slicer-breakpoints {
    $i: index($keys, $k);
    @include below($k){
      > .square:nth-child(#{$i}){
        @include active-square();
      }
    }
  }
}


.demo-grid {
  @extend %cf;
  color: #fff;
  background: $secondary-color;
  padding: 73px 0;

  .demo-column{
    background: $thirdary-color;
    border-color: white;
  }
}
.show-grid{
  > .col-sm-1{
    padding: 10px 15px;
    border: 1px solid darken($thirdary-color, 25);
    box-sizing: border-box;
  }
}
.col-sm-1{
  @include from(m){
    @include span(1/12);
  }
}

//
// DEBUG
//

#between {
  @include between(s, m){
    content: 'between(s, m)';
  }

  @include between(m, l){
    content: 'between(s, m)';
  }

  @include between(s, l){
    content: 'between(s, m)';
  }

  // between test wrong mesure
  @include between(m, s){
    content: 'error between(m, s)';
  }

}

#at {
  @include at(s){
    content: 'at(s)';
  }

  @include at(m){
    content: 'at(s)';
  }

  @include at(l){
    content: 'at(l)';
  }
}


#from {
  @include from(s){
    content: 'from(s)';
  }

  @include from(m){
    content: 'from(s)';
  }

  @include from(l){
    content: 'from(l)';
  }
}

#below {
  @include below(s){
    content: 'below(s)';
  }

  @include below(m){
    content: 'below(m)';
  }

  @include below(l){
    content: 'below(l)';
  }
}
